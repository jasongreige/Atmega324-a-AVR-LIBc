Petit guide pour le correcteur:

Commencons par l'exécutable:
 - L'exécutable est séparé en deux parties soit le main et la configuration des interruptions ISR.
 - On utilise un ISR sur INT0_vect pour l'interuption lors de l'appui du bouton sur le robot relié au port D2. Une variable globale est liée à cette interruption (volatile bool appuiD2).
 - On utilise un ISR sur INT1_vect pour l'interruption lors de l'appui du bouton-poussoir sur le bread board relié au port D3. Une variable globale est liée à cette interruption (volatile bool appuiD3).
 - On utilise un ISR sur TIMER1_COMPA_vect pour l'interruption lancée par la minuterie configurée dans la classe TimerProjet dans le fichier timer.cpp et timer.h. Une variable globale est liée à cette interruption (volatile bool gMinuterieExpiree).
 - Dans la première partie du main, on initialise les registres sur deux boutons utilisés et on déclare des instances de nos classes que l'on utilisera tout au long du main. On utilise également des variables globales pour la manipulation de la mémoire, pour enegistrer la distance lue par le capteur de distance et pour compter le nombre d'itérations du suivi de ligne pour la partie B et S.
 - On a un enum contenant 6 états : 3 états pour naviguer entre les modes A, B et S et 3 autres états pour lorsqu'un de ces états est sélectionné.
 - Les états POINT_A, POINT_B et POINT_S consiste simplement à faire allumer la del d'une certaine couleur, selon l'état, le temps que le bouton-poussoir ou le bouton sur le robot est appuyé
 
- Pour l'état POINT_A_SELECTED:
        - On commence par écrire en mémoire des 0 à trois adresses consécutive. Cette étape va nous aider à déterminer si l'on a détecté 2 ou 3 poteaux lors du parcours puisque si l'on a détecté que 2 poteaux, alors forcément, il y aura un 0 écrit à la troisième adresse.
        - On effectue des lectures à l'aide du capteur de distance tant que le capteur de ligne ne détecte pas une ligne complète horizontale. Ces lectures sont faites à l'aide de la fonction readAndReturnValue() de la classe IRSensor. On considère un poteau loin si la lecture du capteur se trouve entre 17 et 21 et un poteau proche si la lecture se trouve entre 42 et 65.
        - Lorsqu'un poteau est détecté, on écrit dans la mémoire la distance lue grace à la méthode ecriture de la classe MemoireC24XXX, et on joue un son aigu ou grave (dépendemment de la distance du robot) grace à la méthode jouer de la classe song. On fait avancer le robot pendant 1 seconde pour s'assurer que le capteur ne recapte pas une deuxième fois le meme poteau.

 - Pour l'état POINT_B_SELECTED:
        - On commence par lire la mémoire grace à la méthode lecture de la classe Memoire24CXXX et on place les valeurs lues dans les variables uint8_t premiereLecture, deuxiemeLecture et troisiemeLecture.
        - On arrete le robot pour 1 seconde lorsqu'il détecte la fourche grace au compteur que l'on a mis dans notre fonction avancerAvecLigne() de notre classe PWM. Ensuite, on donne une puissance plus élevée à la roue gauche ou droite, dépendemment de la lecture en mémoire. Si troisiemeLecture est égale à 0, on lis deuxiemeLecture, sinon on lis troisiemeLecture.
        - On répete ces étapes pour la deuxième fourche
        - Avant d'effectuer la deuxième fourche, on fait arreter le poteau au milieu des deux fourches grace à un compteur countForB qui effectue le suivi de ligne un certain nombre de fois (2500). Ensuite, on fait tourner le robot à 15 degré vers le poteau si troisiemeLecture n'est pas égale à 0 et on le fait reculer de 1.5 pouces si troisième lecture est égale à 0.
        - Il faut savoir que l'on change de fonction de suivi de ligne lorsque l'on rentre dans les fourches. En effet, on utilise la fonction avancerAvecLigneSansVirage() de la classe PWM dans la fourche pour éviter d'entrer dans les états qui font tourner le robot à 90 degrés vers la gauche ou la droite de la fonction avancerAvecLigne()

 - Pour l'état POINT_S_SELECTED:
        - À l'aide d'un compteur countForS, on fait avancer le robot en suivi de ligne pour une certaine période de temps
        - Une fois cette période écoulée, on dit au robot de tourner vers la droite jusqu'à ce que sa del de droite s'allume (0b10000).
        - Le robot effectue ensuite le rebond dans le couloir grace à la fonction bondirEntreLignes() de la classe PWM.
        - Le robot sait que le couloir a pris fin si aucune de ses del ne s'allume pour une période de 1.3 secondes. Cette manoeuvre est effectuée à l'aide de notre classe TimerProjet qui cause une interruption et qui vient changer la valeur de la variable globale volatile gMinuterieExpiree. Le robot tourne ensuite à droite jusqu'à ce que la del de droite s'allume (0b10000) et continue un suivi de ligne normal.
        - Une manoeuvre similaire est effectuée pour détecté la fin de la ligne noire. On dit au robot, grace au timer, de s'arreter s'il ne détecte plus rien (0b00000) pour une période de 1 seconde.
        - Le stationnement est hardcodé dans notre fonction stationnement() de la classe PWM.



Maintenant pour la librairie: 
 - Pour la classe PWM:
        - C'est la classe PWM qui s'occupe du suivi de ligne avec les fonctions avancerAvecLigne(uint8_t lecture), avancerAvecLigneSansVirage(uint8_t lecture) et bondirEntreLignes() (bondirEntrelignes n'est pas un suivi de ligne).
        - Dans ces fonctions, on ajuste le PWM des roues dans un switch case, où les états de ce switch case sont énumérés dans le fichier lineCaptor.h.
        - Les méthodes comme choisirPoteau(uint8_t lecture), reculerPoteau(uint8_t lecture) et choisirChemin(uint8_t lecture) jouent un role dans la partie B, lorsqu'il faut manipuler le robot selon les données lues par le capteur de distance. Donc ces fonctions comprennent un if avec des bornes semblables au code dans le main de la partie POINT_A_SELECTED (entre 17 et 21 & entre 42 et 65).
        
 - Pour la classe IRSensor:
        - On  lit la valeur retournée par la pin A0 grace à la méthode lecture de la classe Can. Cette valeur est ensuite ajustée sur 8 bits par la fonction get8bits que l'on a ajoutée à la classe Can.
        - La fonction readAndReturnValue() effectue 50 lectures consécutives et renvoie la moyenne de ces 50 lectures. 

 - Pour la classe LineCaptor:
        - La classe comporte une fonction faisant un masque sur le PINA de sorte à retourner une valeur en 8 bits qui concorde avec le branchement du capteur de ligne. Nous avons donc pris en considération la valeur de 0 du calibrage lors de l'application du masque. 
        - Les états utilisés dans la classe PWM sont énumérés dans le .h. Ses états sont nommés selon l'action que devra faire le robot si jamais il se retrouve dans cet état. Par exemple, si le robot détecte 0b10000, il devra faire un grand tour du coté droit (veryBigTurnRight).

    Pour la classe TimerProjet:
        - Nous avons simplifié notre classe pour la minuterie puisque nous avons remarqué que nous aurons besoin de cette classe que pour manipuler le timer1.
        - La fonction startTimer(double duration) a un prescalor de 1024. 
        - La fonction stop() arrete le timer1. 

    Pour la classe Led:
        - Les fonctions blinkRed(), blinkGreen() et blinkAmber() font clignoter la del 4 fois pendant 2 secondes. 
    
    Pour les autres classes:
        - Nous les avons pas modifié depuis le tp 7.



      


        
